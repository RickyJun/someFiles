# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  # 1 免密下载 2 密码下载(需要传 buildPassword)
  buildInstallType = "1"
  # 下载密码
  buildPassword = "000000"
  # 更新描述
  buildUpdateDescription = ""
  # 蒲公英 API_KEY
  pgyer_api_key = "7fc389c0aeabe0957bd27f2ad4be1bb8"
  # 蒲公英 USER_KEY
  pgyer_user_key = "fa97983d46f19996341e175aeda1d7a6"
  # fir API_KEY
  fir_api_key = ""
  # flavor 打本地包 single 打默认渠道包 根据 lane_name 的值 上传蒲公英 / fir
  build_flavor_type = "single"



  before_all do |lane, options|
    # options参数
    buildInstallType  = options[:buildInstallType]
    buildPassword = options[:buildPassword]
    buildUpdateDescription = options[:buildUpdateDescription]
    pgyer_api_key = options[:pgyer_api_key]
    pgyer_user_key = options[:pgyer_user_key]
    fir_api_key = options[:fir_api_key]
    build_flavor_type = options[:build_flavor_type]
  end

  

  desc '构建 pgyer 内测iOS包'
  lane :beta_pgyer do
    cert(
      username: ENV['FASTLANE_USER'], # Apple ID
      output_path: "./sign_files", # 存储所有证书和私钥的目录的路径
    )

    # 如果没有在Apple Developer创建证书的话，get_certificates会帮你自动创建证书
    sigh(
      adhoc: true, # true：生成AdHoc profiles，false：生成App Store Profiles
      username: ENV['FASTLANE_USER'], # APPle ID
      app_identifier: ENV['APP_IDENTIFIER'], # bundle id
      force: true, # 更新描述文件并忽略其状态，同时自动为ad hoc profiles添加所有设备
      output_path: "./sign_files", # 存储的路径
    )

    gym(
      clean: true,
      output_directory: './output',
      export_options: {
        method: 'ad-hoc', # 这可以不指定
        thinning: '<none>'
      },
      scheme: 'Runner'
    )
    
    if build_flavor_type == "single"
      pgyer(api_key: pgyer_api_key, user_key: pgyer_user_key, password: buildPassword, install_type: buildInstallType, update_description: buildUpdateDescription)
    end

  end

  desc '构建 fir 内测iOS包'
  lane :beta_firim do
    
    # 如果你用 pod install
    # cocoapods
    # 如果你没有申请adhoc证书，sigh会自动帮你申请，并且添加到Xcode里
    # sigh(adhoc: true)
    # 以下两个action来自fastlane-plugin-versioning，
    # 第一个递增 Build，第二个设定Version。
    # 如果你有多个target，就必须指定target的值，否则它会直接找找到的第一个plist修改
    # 在这里我建议每一个打的包的Build都要不一样，这样crash了拿到日志，可以对应到ipa上
    # increment_build_number_in_plist(target:ENV['SCHEME_NAME'])
    # increment_version_number_in_plist(
    #   target:ENV['SCHEME_NAME'],
    #   version_number: ENV['APP_VERSION_RELEASE']
    # )
    
    cert(
      # team_id: ENV['TEAM_ID'], # Team ID
      # development: true, # 创建一个开发证书
      # force: "false", # 即使存在现有证书，也要创建证书，默认为false
      # filename: "dev_cert", # 存储文件名
      username: ENV['FASTLANE_USER'], # Apple ID
      output_path: "./sign_files", # 存储所有证书和私钥的目录的路径
    )

    # 如果没有在Apple Developer创建证书的话，get_certificates会帮你自动创建证书
    sigh(
      # team_id: ENV['TEAM_ID'], # team ID
      # cert_id: xxx, # 使用的证书id
      # provisioning_name: 'com.xx.FastLane_AdHoc', # 开发者中心上面的描述文件名称
      # ignore_profiles_with_different_name: true, # 与provisioning_name参数联合使用，true：当描述文件名称完全匹配provisioning_name时才下载，false：不完全匹配也下载
      # filename: "xxx.mobileprovision", # 存储文件名
      # skip_install: false, # 默认会自动添加证书到你的本地机器上，设置该参数可以跳过该步骤
      # development: false,  # 更新开发证书而不是生产证书
      # readonly: true, # 只获取，不生成新的
      adhoc: true, # true：生成AdHoc profiles，false：生成App Store Profiles
      username: ENV['FASTLANE_USER'], # APPle ID
      app_identifier: ENV['APP_IDENTIFIER'], # bundle id
      force: true, # 更新描述文件并忽略其状态，同时自动为ad hoc profiles添加所有设备
      output_path: "./sign_files", # 存储的路径
    )

    # gym用来编译ipa
    gym(
      clean: true,
      output_directory: './output',
      export_options: {
        method: 'ad-hoc', # 这可以不指定
        thinning: '<none>'
      },
      scheme: 'Runner'
    )

    if build_flavor_type == "single"
      # 上传ipa到fir.im服务器，在fir.im获取firim_api_token
      # firim(firim_api_token: '')
      # 多个参数 可以使用逗号(, )分离   
      fir_cli api_token: fir_api_key
    end

  end
end
